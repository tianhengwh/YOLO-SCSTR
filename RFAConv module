class CAConv(nn.Module):
    def __init__(self, channel, reduction=32):
        super(CAConv, self).__init__()
        self.pool_h = nn.AdaptiveAvgPool2d((None, 1))
        self.pool_w = nn.AdaptiveAvgPool2d((1, None))
 
        mip = max(8, channel // reduction)
 
        self.conv1 = nn.Conv2d(channel, mip, kernel_size=1, stride=1, padding=0)
        self.bn1 = nn.BatchNorm2d(mip)
        self.act = nn.Hardswish()
 
        self.conv_h = nn.Conv2d(mip, channel, kernel_size=1, stride=1, padding=0)
        self.conv_w = nn.Conv2d(mip, channel, kernel_size=1, stride=1, padding=0)
 
 
    def forward(self, x):
        identity = x
        n, c, h, w = x.size()
        x_h = self.pool_h(x)
        x_w = self.pool_w(x).permute(0, 1, 3, 2)
        y = torch.cat([x_h, x_w], dim=2)
        y = self.conv1(y)
        y = self.bn1(y)
        y = self.act(y)
        x_h, x_w = torch.split(y, [h, w], dim=2)
        x_w = x_w.permute(0, 1, 3, 2)
        a_h = self.conv_h(x_h).sigmoid()
        a_w = self.conv_w(x_w).sigmoid()
        out = identity * a_w * a_h
 
        return out
 
 
class RFACA(nn.Module):
    def __init__(self, c1, c2, k=1, s=1, p=None, g=1, d=1, act=True):
        super(RFACA, self).__init__()
        self.conv = nn.Conv2d(c1, c2, k, s, autopad(k, p, d), groups=g, dilation=d, bias=False)
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.group_conv1 = nn.Conv2d(c2, 9 *c2,1, 1, autopad(1, None, 1), groups=c2)
self.group_conv2 = nn.Conv2d(c2, 9 *c2,3, 1, autopad(3, None, 1), groups=c2)
        self.group_conv3 = nn.Conv2d(c2, 9 *c2,5, 1, autopad(5, None, 1), groups=c2)
        self.softmax = nn.Softmax(dim=1)
        self.group_conv4 = Conv(c2, 9 * c2, k=k, g=c2)
        self.group_conv5 = Conv(c2, 9 * c2, k=k, g=c2)
        self.group_conv6 = Conv(c2, 9 * c2, k=k, g=c2)
        self.CA = CAConv(c2)
        self.convDown = Conv(c2, c2, k=3, s=3)
    def forward(self, x):
        x=self.conv(x)
        y = self.avg_pool(x)
        group1 = self.softmax(self.group_conv1(y))
        group2 = self.softmax(self.group_conv2(y))
        group3 = self.softmax(self.group_conv3(y))
        g1 = self.group_conv4(x)
        g2 = self.group_conv5(x)
        g3 = self.group_conv6(x)
        out1 = g1 * group1.expand_as(g1)
        out2 = g2 * group2.expand_as(g2)
        out3 = g3 * group3.expand_as(g3)
        out = out1+out2+out3
        batch_size, channels, height, width = out.shape
        output_channels = channels // 9
        out = out.view(batch_size, output_channels, 3,3, height,width).permute(0, 1, 4,2,5,3).reshape(batch_size,
        output_channels, 3 * height, 3 * width)
        out = self.CA(out)
        out = self.convDown(out)
        return out
